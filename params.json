{"name":"Consolephonebook","tagline":"PhoneBookImplementation_CPP","body":"### This is a console PhoneBook program\r\n### This is built on C++, also featured some C++11 functionality\r\n### Such as Lambda, Regular Expression, Boost Library, OOP\r\n### Moreover STL, MAP, DYNAMIC Vector, String Class\r\n### Used file for persistent data(In need of databases too)\r\n### We measure our call duration using single handle Using SIGINT\r\n### We sanitize user value in more robust way\r\n### With manual Exception Handling\r\n### The Project is developed using Clang++ based on LLVM(low-level virtual machine) and Visual Studio 2015\r\n### The Project has no memory-leak check with Valgrind(a handy memory debugger)\r\n### Finally, The code is pushed on GitHub, you can check the code and report bugs\r\n### The Program has two edition >Linux >Windows will run on mac(PO-SIX) as well\r\n### The program is open-sourced, any good suggestions will be highly appreciated\r\n\r\n## NOTE:\r\n\r\nTo compile in Linux use Makefile, Make sure you are using clang++ 3.6.2 compiler\r\nor GCC 4.9.3 and\r\nother defendencies\r\n\r\n##### Makefile has been included for LinuxEdition\r\n\r\n>> Just run\r\n\r\n    make\r\n\r\n\r\nTo clear the object files, run\r\n\r\n    make clean\r\n\r\nTo compile in Windows, Make sure you compiler must support ISO C++11 Standard\r\n\r\n>> Github URL is given below\r\n\r\n\r\n    https://github.com/ehzShelter/ConsolePhoneBook\r\n\r\n>> For Windows just used windows.h, for linux used unistd.h\r\n\r\n\r\n>> We will introduce the header aka functions prototypes only\r\n\r\n## Project in Progress(RC editions)\r\n\r\nLines       Words        Bytes       Modules\r\n\r\n   28        51           495         Phone.h\r\n\r\n   47        91           816         mobile.h\r\n\r\n   33        62           613         person.h\r\n\r\n   47        86           904         userInput.h\r\n\r\n   84       234          1747         Phone.cpp\r\n\r\n   62       227          1783         main.cpp\r\n\r\n  229       617          4153         mobile.cpp\r\n\r\n   97       234          2043         person.cpp\r\n\r\n   90       171          1697         userInput.cpp\r\n\r\n..............................................\r\n\r\n  719      1780          14288 total\r\n\r\n## Programm main function has 14(fourteen) different cases for\r\n###    different purposes\r\n\r\n This is actually a part of a main program\r\n\r\n>\tcase 1: client.callPerson(client,1); break;\r\n\r\n>\tcase 2: phoneRecord.addNewContact(phoneRecord); break;\r\n\r\n>\tcase 3: phoneRecord.findAndChange(); break;\r\n\r\n>\tcase 4: phoneRecord.eraseEntireBook(); break;\r\n\r\n>\tcase 5: client.addCredit(); break;\r\n\r\n>\tcase 6: cout << \"Your credit: \" << client.getCredit() << \" tk\"; break;\r\n\r\n>\tcase 7: client.viewHistory(); break;\r\n\r\n>   case 8: human.registerPerson(human); break;\r\n\r\n>   case 9: client.callbyName(client); break;\r\n\r\n>   case 10: client.sendText(); break;\r\n\r\n>   case 11: human.cost(); break;\r\n\r\n>   case 12: human.averageCallLength(); break;\r\n\r\n>   case 13: human.totalCredit(); break;\r\n\r\n>   case 14: client.favorite(); break;\r\n\r\n>\tcase 0: break;\r\n\r\n>\tdefault: phoneRecord.printException(); break;\r\n\r\n\r\n## We have designed our program in four classes\r\n#### One extra class we have used, which is used for INHERITANCE(Single Inheritance)\r\n# The one base class named Input\r\n\r\n## Base Class\r\n>\r\n>    class Input\r\n\r\n>    {\r\n\r\n>    protected:\r\n\r\n>        static int totalSecond;\r\n\r\n>        static int numberOfCalls;\r\n\r\n>        string name;\r\n\r\n>        string number;\r\n\r\n>        string email;\r\n\r\n>        string address;\r\n\r\n>        string city;\r\n\r\n>        string state;\r\n\r\n>        string zipCode;\r\n\r\n>        string phoneModel;\r\n\r\n>\r\n\r\n>    public:\r\n\r\n>        bool validate(const string&, const string&);\r\n\r\n>        string inputData(const string&,const string&);\r\n>\r\n>        void setName(void);\r\n\r\n>        string getName(void);\r\n\r\n>        void setNumber(void);\r\n\r\n>        string getNumber(void);\r\n\r\n>        void setEmail(void);\r\n\r\n>        string getEmail(void);\r\n\r\n>        void setCity(void);\r\n\r\n>        string getCity(void);\r\n\r\n>        void setState(void);\r\n\r\n>        string getState(void);\r\n\r\n>        void setZipCode(void);\r\n\r\n>        string getZipCode(void);\r\n\r\n>        void setPhoneModel(void);\r\n\r\n>        string getPhoneModel(void);\r\n\r\n>    };\r\n\r\n\r\n## Running in Linux\r\n\r\n![Running Program](https://raw.githubusercontent.com/ehzShelter/ConsolePhoneBook/master/running_program.png)\r\n\r\n![History](https://raw.githubusercontent.com/ehzShelter/ConsolePhoneBook/master/history.png)\r\n\r\n![Memory Management](https://raw.githubusercontent.com/ehzShelter/ConsolePhoneBook/master/no_memoryLeak.png)\r\n\r\n## Class one\r\n>    class mobile : public Input\r\n\r\n>    {\r\n\r\n>    private:\r\n\r\n>        string dt;\r\n\r\n>        double credit = 200.00;\r\n\r\n>        vector< mobile >callHistory;\r\n\r\n>        vector< mobile >contact;\r\n\r\n>        vector< mobile > message;\r\n\r\n>        vector< mobile >::iterator it;\r\n\r\n>        map<string, int> myMap;\r\n\r\n>        vector<string> numberKey;\r\n\r\n>\r\n>    public:\r\n\r\n>        void load(void);\r\n\r\n>        void bill(void);\r\n\r\n>        string date(void);\r\n\r\n>        int callTime(void);\r\n\r\n>        void callPerson(mobile&, int);\r\n\r\n>        void addCredit(void);\r\n\r\n>        double getCredit(void);\r\n\r\n>        void addCallHistory(mobile&);\r\n\r\n>        void viewHistory(void);\r\n\r\n>        void fileRW(mobile&);\r\n\r\n>        void callbyName(mobile&);\r\n\r\n>        void favorite(void);\r\n\r\n>        sendText(mobile&);\r\n\r\n>    };\r\n\r\n\r\n## Class Two\r\n>    class Phone : public Input\r\n\r\n>    {\r\n\r\n>    private:\r\n\r\n>        vector< Phone >object;\r\n\r\n>        vector< Phone >::iterator it;\r\n\r\n>\r\n>    public:\r\n\r\n>        void findAndChange(void);\r\n\r\n>        void callbyName(void);\r\n\r\n>        void eraseEntireBook(void);\r\n\r\n>        void addNewContact(Phone&);\r\n\r\n>        void printException(void);\r\n\r\n>        void fileRW(string &);\r\n\r\n>    };\r\n\r\n\r\n## Class Three\r\n\r\n>    class person : public Input\r\n\r\n>    {\r\n\r\n>        friend bool registerOnDemand(person &);\r\n\r\n>    private:\r\n\r\n>        vector< person >object;\r\n\r\n>        vector< person >::iterator it;\r\n\r\n>        string sim;\r\n\r\n>        static int credit;\r\n\r\n>\r\n>    public:\r\n\r\n>        void registerPerson(person &);\r\n\r\n>        void setNewSim(void);\r\n\r\n>        string getSim(void);\r\n\r\n>        void exceptionhandle(void);\r\n\r\n>        void cost(void);\r\n\r\n>        void averageCallLength(void);\r\n\r\n>        void totalCredit(void);\r\n\r\n>    };\r\n\r\nDocumentation:\r\n\r\nTo match user input, we have used regex_match(\"String\", \"Matching pattern) which is under <regex> header\r\nMost of the time, we have used object reference to wor kthe programm perfectly\r\n\r\nModern C++11 feature auto, range-based loop, regex....etc\r\n\r\n#### Windows Screenshot\r\n>Fancy\r\n\r\n![Windows](https://raw.githubusercontent.com/ehzShelter/ConsolePhoneBook/master/VisualStudio.png)\r\n\r\n## Any query, email me, mechezawad@outlook.com, for bugs, create issues in Github\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}